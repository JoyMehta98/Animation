#include <graphics.h>
#include <dos.h>
#include <math.h>
#include <stdio.h>
#include <conio.h>

//FUNCTION FOR ROTATION COORDINATES
void move(int xrad,int yrad,int midx,int midy,int x[380],int y[380],int h)
{
	int i,j = 0;
	//MERCURY
	if(h==0)
	{
		for(i=360;i>0;i=i-36)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//VENUS
	else if(h==1)
	{
		for(i=360;i>0;i=i-18)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//EARTH
	else if(h==2)
	{
		for(i=360;i>0;i=i-12)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//MARS
	else if(h==3)
	{
		for(i=360;i>0;i=i-9)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//JUPITER
	else if(h==4)
	{
		for(i=360;i>0;i=i-6)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//SATURN
	else if(h==5)
	{
		for(i=360;i>0;i=i-4)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//URANUS
	else if(h==6)
	{
		for(i=360;i>0;i=i-3)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//NEPTUNE
	else if(h==7)
	{
		for(i=360;i>0;i=i-2)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}
	//PLUTO
	else if(h==8)
	{
		for(i=360;i>0;i=i-1)
		{
			x[j] = midx - (xrad * cos((i*3.14)/180));
			y[j++] = midy - (yrad * sin((i*3.14)/180));
		}
	}

	return;
}

int main(void)
{

   int gdriver = DETECT, gmode;
   int xrad[9],yrad[9],x[9][380],y[9][380];
   int i = 0,midx,midy,g=0;
   int pos[9],planet[9];

   /* initialize graphics, local variables */
   initgraph(&gdriver, &gmode, "");


   //CENTER
   midx = getmaxx() / 2;
   midy = getmaxy() / 2;

   //PLANET'S ORBITS
   xrad[0] = 60;	yrad[0] = 30;
   for(i=1;i<9;i++)
   {
		xrad[i] = xrad[i-1] + 30;
		yrad[i] = yrad[i-1] + 15;
   }

   //PLANET'S RADIUS
   planet[0] = 5;
   for(i=1;i<9;i++)
   {
		planet[i] = planet[i - 1] + 1;
   }

   //INITIAL POSITION OF THE PLANETS
   for(i=0 ; i<9 ; i++)
   {
		pos[i] = i * 6;
   }

   for(i=0;i<9;i++)
   {
		move(xrad[i],yrad[i],midx,midy,x[i],y[i],g++);
   }


   while(!kbhit())
   {
		setcolor(WHITE);
		for(i=0;i<9;i++)
		{
			ellipse(midx,midy,0,360,xrad[i],yrad[i]);
		}

		//SUN
		setcolor(YELLOW);
		setfillstyle(SOLID_FILL, YELLOW);
		circle(midx, midy, 20);
		floodfill(midx, midy, YELLOW);
		setcolor(RED);
		outtextxy(midx-9,midy-5,"Sun");
		
		//PLANETS
		//MERCURY
		setcolor(3);
		setfillstyle(SOLID_FILL,3);
		pieslice(x[0][pos[0]],y[0][pos[0]],0,360,planet[0]);
		outtextxy(x[0][pos[0]],y[0][pos[0]]-10,"Mercury");

		//VENUS
		setcolor(2);
		setfillstyle(SOLID_FILL,2);
		pieslice(x[1][pos[1]],y[1][pos[1]],0,360,planet[1]);
		outtextxy(x[1][pos[1]],y[1][pos[1]]-12,"Venus");

		//EARTH
		setcolor(1);
		setfillstyle(SOLID_FILL,1);
		pieslice(x[2][pos[2]],y[2][pos[2]],0,360,planet[2]);
		outtextxy(x[2][pos[2]],y[2][pos[2]]-14,"Earth");

		//MARS
		setcolor(4);
		setfillstyle(SOLID_FILL,4);
		pieslice(x[3][pos[3]],y[3][pos[3]],0,360,planet[3]-2);
		outtextxy(x[3][pos[3]],y[3][pos[3]]-12,"Mars");

		//JUPITER
		setcolor(5);
		setfillstyle(SOLID_FILL,5);
		pieslice(x[4][pos[4]],y[4][pos[4]],0,360,planet[4]);
		outtextxy(x[4][pos[4]],y[4][pos[4]]-16,"Jupiter");

		//SATURN
		setcolor(6);
		setfillstyle(SOLID_FILL,6);
		pieslice(x[5][pos[5]],y[5][pos[5]],0,360,planet[5]);
		outtextxy(x[5][pos[5]],y[5][pos[5]]-18,"Saturn");

		//URANUS
		setcolor(7);
		setfillstyle(SOLID_FILL,7);
		pieslice(x[6][pos[6]],y[6][pos[6]],0,360,planet[6]);
		outtextxy(x[6][pos[6]],y[6][pos[6]]-20,"Uranus");

		//NEPTUNE
		setcolor(8);
		setfillstyle(SOLID_FILL,8);
		pieslice(x[7][pos[7]],y[7][pos[7]],0,360,planet[7]);
		outtextxy(x[7][pos[7]],y[7][pos[7]]-22,"Neptune");

		//PLUTO
		setcolor(9);
		setfillstyle(SOLID_FILL,9);
		pieslice(x[8][pos[8]],y[8][pos[8]],0,360,planet[8]);
		outtextxy(x[8][pos[8]],y[8][pos[8]]-24,"Pluto");

		setcolor(10);
		outtextxy(midx-45,20,"SOLAR SYSTEM");

		//ROTATIONS
		for(i=0;i<9;i++)
		{
			if(pos[i]<=0 && i==0)
				pos[i] = 9;
			else if(pos[i]<=0 && i==1)
				pos[i] = 19;
			else if(pos[i]<=0 && i==2)
				pos[i] = 29;
			else if(pos[i]<=0 && i==3)
				pos[i] = 39;
			else if(pos[i]<=0 && i==4)
				pos[i] = 59;
			else if(pos[i]<=0 && i==5)
				pos[i] = 89;
			else if(pos[i]<=0 && i==6)
				pos[i] = 119;
			else if(pos[i]<=0 && i==7)
				pos[i] = 179;
			else if(pos[i]<=0 && i==8)
				pos[i] = 359;
			else
				pos[i] = pos[i] - 1;
		}

		delay(100);
		cleardevice();
   }

   getch();
   closegraph();
   return 0;
}

